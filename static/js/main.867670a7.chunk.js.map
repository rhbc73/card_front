{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["FormItem","Form","Item","confirm","Modal","App","props","_this2","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","columns","dataIndex","title","width","render","text","row","react_default","a","createElement","es_button","onClick","modal","style","marginLeft","type","remove","state","dataSource","visible","modalType","editRow","filltable","axios","get","then","data","setState","handleOk","form","validateFieldsAndScroll","err","value","cardnumber","cardholder","nickname","post","msg","put","resetFields","setFieldsValue","console","log","_this","assertThisInitialized","okText","cancelText","onOk","delete","_this3","getFieldDecorator","formItemLayout","labelCol","xs","span","sm","wrapperCol","className","es_row","paddingTop","table","rowKey","bordered","pagination","onCancel","es_form","assign","label","rules","required","message","min","input","placeholder","Component","create","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.867670a7.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\nimport axios from \"axios\";\nimport { Table, Input, Row, Button, Modal, Form, message } from \"antd\";\nimport \"antd/dist/antd.css\";\n\nconst FormItem = Form.Item;\nconst { confirm } = Modal;\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  columns = [\n    {\n      dataIndex: \"cardnumber\",\n      title: \"Card Number\"\n    },\n    {\n      dataIndex: \"type\",\n      title: \"Type\"\n    },\n    {\n      dataIndex: \"subtype\",\n      title: \"Subtype\"\n    },\n    {\n      dataIndex: \"cardholder\",\n      title: \"Card Holder\"\n    },\n    {\n      dataIndex: \"nickname\",\n      title: \"Nick Name\"\n    },\n    {\n      dataIndex: \"action\",\n      title: \"Edit\",\n      width: 200,\n      render: (text, row) => {\n        return (\n          <div>\n            <Button onClick={() => this.modal(\"edit\", row)}>Edit</Button>\n            <Button\n              style={{ marginLeft: 10 }}\n              type=\"danger\"\n              onClick={() => this.remove(row)}\n            >\n              Delete\n            </Button>\n          </div>\n        );\n      }\n    }\n  ];\n  state = {\n    dataSource: [],\n    visible: false,\n    modalType: \"add\",\n    editRow: {}\n  };\n\n  componentDidMount() {\n    this.filltable();\n  }\n\n  filltable = () => {\n    axios.get(\"http://card2app.fhufmxx54e.us-east-2.elasticbeanstalk.com/cards/\").then(data => {\n      this.setState({\n        dataSource: data.data\n      });\n    });\n  };\n\n  handleOk = () => {\n    this.props.form.validateFieldsAndScroll((err, value) => {\n      if (err) return;\n      let data = {\n        cardnumber: value.cardnumber,\n        cardholder: value.cardholder,\n        nickname: value.nickname\n      };\n      if (this.state.modalType === \"add\") {\n        axios.post(\"http://card2app.fhufmxx54e.us-east-2.elasticbeanstalk.com/cards/\", data).then(msg => {\n          this.filltable();\n          this.setState({ visible: false });\n        });\n      } else {\n        axios\n          .put(\n            \"http://card2app.fhufmxx54e.us-east-2.elasticbeanstalk.com/cards/\" + this.state.editRow.cardnumber,\n            data\n          )\n          .then(data => {\n            this.filltable();\n            this.setState({ visible: false });\n          });\n      }\n    });\n  };\n\n  // edit\n  modal = (type, row) => {\n    this.setState(\n      {\n        visible: true,\n        modalType: type\n      },\n      () => {\n        this.props.form.resetFields();\n        if (type === \"add\") return;\n        this.props.form.setFieldsValue({\n          cardnumber: row.cardnumber,\n          cardholder: row.cardholder,\n          nickname: row.nickname\n        });\n        console.log(row);\n        this.setState({ editRow: row });\n      }\n    );\n  };\n\n  // remove\n  remove = row => {\n    let _this = this;\n    confirm({\n      title: \"Delete this card?\",\n      okText: \"Yes\",\n      cancelText: \"No\",\n      onOk() {\n        axios\n          .delete(\"http://card2app.fhufmxx54e.us-east-2.elasticbeanstalk.com/cards/\" + row.cardnumber)\n          .then(data => {\n            _this.filltable();\n          });\n      }\n    });\n  };\n\n  render() {\n    const { getFieldDecorator } = this.props.form;\n    const formItemLayout = {\n      labelCol: {\n        xs: { span: 24 },\n        sm: { span: 6 }\n      },\n      wrapperCol: {\n        xs: { span: 24 },\n        sm: { span: 16 }\n      }\n    };\n    return (\n      <div className=\"App\">\n        <Row>\n          <Button\n            type=\"primary\"\n            style={{ marginLeft: 20 }}\n            onClick={() => this.modal(\"add\")}\n          >\n            Add Card\n          </Button>\n        </Row>\n        <Row style={{ paddingTop: 20 }}>\n          <Table\n            dataSource={this.state.dataSource}\n            rowKey={row => row.cardnumber}\n            bordered\n            columns={this.columns}\n            pagination={false}\n          />\n        </Row>\n\n        <Modal\n          title={this.state.modalType === \"add\" ? \"Add Card\" : \"Edit Card\"}\n          onOk={this.handleOk}\n          onCancel={() => this.setState({ visible: false })}\n          visible={this.state.visible}\n        >\n          <Form>\n            <FormItem label=\"Card Number\" {...formItemLayout}>\n              {getFieldDecorator(\"cardnumber\", {\n                rules: [\n                  { required: true, message: \"Please input card number!\" },\n                  { min: 6, message: \"Card number length should >= 6\" }\n                ]\n              })(<Input type=\"number\" placeholder=\"cardnumber\" />)}\n            </FormItem>\n            <FormItem label=\"Card Holder\" {...formItemLayout}>\n              {getFieldDecorator(\"cardholder\", {\n                rules: [{ required: false }]\n              })(<Input placeholder=\"cardholder\" />)}\n            </FormItem>\n            <FormItem label=\"NickName\" {...formItemLayout}>\n              {getFieldDecorator(\"nickname\", {\n                rules: [{ required: false }]\n              })(<Input placeholder=\"nickname\" />)}\n            </FormItem>\n          </Form>\n        </Modal>\n      </div>\n    );\n  }\n}\n\nexport default Form.create()(App);\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}